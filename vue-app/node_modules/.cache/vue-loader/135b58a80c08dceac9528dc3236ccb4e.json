{"remainingRequest":"/Users/jordangamache/Desktop/Projects/Website/vue-app/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jordangamache/Desktop/Projects/Website/vue-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jordangamache/Desktop/Projects/Website/vue-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jordangamache/Desktop/Projects/Website/vue-app/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/jordangamache/Desktop/Projects/Website/vue-app/src/App.vue","mtime":1594087954271},{"path":"/Users/jordangamache/Desktop/Projects/Website/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jordangamache/Desktop/Projects/Website/vue-app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jordangamache/Desktop/Projects/Website/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jordangamache/Desktop/Projects/Website/vue-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAiYXBwIiB9IH0sIFsKICAgIF9jKAogICAgICAiZGl2IiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOiAiQXBwIiwKICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1jb2xvciI6ICJyZ2IoMjQxLCAyNDEsIDI0MSkiIH0KICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogImhlcm8gaXMtbGFyZ2UiIH0sIFsKICAgICAgICAgIF92bS5fbSgwKSwKICAgICAgICAgIF92bS5fbSgxKSwKICAgICAgICAgIF92bS5fbSgyKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY1N0eWxlOiB7IGhlaWdodDogIjEwdmgiIH0gfSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfdm0uX20oMyksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY1N0eWxlOiB7IHBhZGRpbmc6ICI0MHB4IiB9IH0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRpbGUgaXMtY2hpbGQiIH0sIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhcnRpY2xlIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0aWxlIGlzLWNoaWxkIGNvbnRhaW5lciBib3giLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImNhcmQiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRpdGxlIiB9LCBbX3ZtLl92KCJQcm9qZWN0cyIpXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sdW1ucyBpcy1tdWx0aWxpbmUiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNvbHVtbiIgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoIkhlbGxvV29ybGQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiU25vd2NhcCBDb2ZmZWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluazogImh0dHBzOi8vc25vd2NhcC1jb2ZmZWUud2ViLmFwcCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWc6ICJzbm93Y2FwLnBuZyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb2x1bW4iIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJIZWxsb1dvcmxkIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIlNpbXBseSBCb2JhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms6ICJodHRwczovL3NpbXBseS1ib2JhLndlYi5hcHAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nOiAic2ltcGx5LXNjLnBuZyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb2x1bW4iIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJIZWxsb1dvcmxkIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIlRyZWsgTm9pc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluazogImh0dHBzOi8vdHJlay1ub2lzZS53ZWIuYXBwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZzogInRyZWtub2lzZS5wbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sdW1uIiB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiSGVsbG9Xb3JsZCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICJEYWlseSAtIFRvLURvIEFwcCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiAiaHR0cHM6Ly9zaG93Y2FzZS1kYWlseS53ZWIuYXBwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZzogInNob3djYXNlLXNjLnBuZyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb2x1bW4iIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJIZWxsb1dvcmxkIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIk11bmNoIC0gUmVzdGF1cmFudCBBcHAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluazogImh0dHBzOi8vbXVuY2hzaG93Y2FzZS53ZWIuYXBwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZzogIm11bmNoLnBuZyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb2x1bW4iIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJIZWxsb1dvcmxkIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIlRvbSBHYW1hY2hlIEJvb2tzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms6ICJodHRwczovL3RvbWdhbWFjaGVib29rcy53ZWIuYXBwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZzogInRnLnBuZyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNTdHlsZTogeyBwYWRkaW5nOiAiNXZoIiB9IH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fbSg0KSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY1N0eWxlOiB7IGhlaWdodDogIjEwdmgiIH0gfSksCiAgICAgICAgICBfdm0uX20oNSkKICAgICAgICBdKQogICAgICBdCiAgICApCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJoZXJvLWhlYWQiLAogICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogIndoaXRlIiB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygKICAgICAgICAgICJoZWFkZXIiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdmJhciIsCiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgaGVpZ2h0OiAiMjBweCwgcG9zaXRpb246IGZpeGVkLCByaWdodDogMTBweCwgbWFyZ2luLXRvcDogMjBweCIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm5hdmJhci1icmFuZCIgfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXZiYXItYnVyZ2VyIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgcm9sZTogImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAiZGF0YS10YXJnZXQiOiAibmF2TWVudSIsCiAgICAgICAgICAgICAgICAgICAgICAiYXJpYS1sYWJlbCI6ICJtZW51IiwKICAgICAgICAgICAgICAgICAgICAgICJhcmlhLWV4cGFuZGVkIjogImZhbHNlIiwKICAgICAgICAgICAgICAgICAgICAgICJpcy1hY3RpdmUiOiAiZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IGF0dHJzOiB7ICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9IH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBhdHRyczogeyAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfSB9KSwKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgYXR0cnM6IHsgImFyaWEtaGlkZGVuIjogInRydWUiIH0gfSkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibmF2YmFyLW1lbnUiLCBhdHRyczogeyBpZDogIm5hdk1lbnUiIH0gfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJuYXZiYXItZW5kIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAibmF2YmFyLWl0ZW0iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnV0dG9uIGlzLWRhbmdlciBtb2RhbC1idXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGF0YS10YXJnZXQiOiAibW9kYWwtc3RhY2siLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImFyaWEtaGFzcG9wdXAiOiAidHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJpY29uIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYWIgZmEtcmVhY3QiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCJTdGFjayIpXSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIm5hdmJhci1pdGVtIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidXR0b24gaXMtc3VjY2VzcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICJmaWxlcy9Kb3JkYW5HYW1hY2hlUmVzdW1lLnBkZiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJpY29uIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1maWxlIiB9KQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiUmVzdW1lIildKQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAibmF2YmFyLWl0ZW0iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ1dHRvbiBpcy1saW5rIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9qb3JkYW4tZ2FtYWNoZS0zNzQ0MTcxNjUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiaWNvbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtbGlua2VkaW4iIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCJMaW5rZWRJbiIpXSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIm5hdmJhci1pdGVtIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidXR0b24gaXMtYmxhY2siLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vc2NvdGNoMTE1IiB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJpY29uIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYSBmYS1naXRodWIiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCJHaXRIdWIiKV0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbCIsIGF0dHJzOiB7IGlkOiAibW9kYWwtc3RhY2siIH0gfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWJhY2tncm91bmQiIH0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWNhcmQiIH0sIFsKICAgICAgICBfYygiaGVhZGVyIiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWNhcmQtaGVhZCIgfSwgWwogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtY2FyZC10aXRsZSIgfSwgW192bS5fdigiRkVSTiBTdGFjayIpXSksCiAgICAgICAgICBfYygiYnV0dG9uIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImRlbGV0ZSIsCiAgICAgICAgICAgIGF0dHJzOiB7ICJhcmlhLWxhYmVsIjogImNsb3NlIiwgImRhdGEtdGFyZ2V0IjogIm1vZGFsLXN0YWNrIiB9CiAgICAgICAgICB9KQogICAgICAgIF0pLAogICAgICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWNhcmQtYm9keSIgfSwgWwogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGl0bGUiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJUaGlzIHdlYnNpdGUgaXMgYnVpbHQgb24gdGhlIEZFUk4gc3RhY2suIikKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIEZFUk4gaXMgYW4gYWNyb255bSBmb3IgYSBGdWxsIFN0YWNrIChvciBhbGwgaW5jbHVzaXZlKSBtZXRob2Qgb2Ygd2ViIGRldmVsb3BtZW50LiBJbiBwYXJ0aWN1bGFyLCB0aGUgRkVSTiBzdGFjayBpbmNvcnBvcmF0ZXMgc29tZSBvZiB0aGUgbW9zdCBwb3B1bGFyIGZyYW1ld29ya3MgYW5kIHRvb2xzIHRvIGFjY29tcGFueSB0cmFkaXRpb25hbCB3ZWIgZGV2ZWxvcG1lbnQgdGVjaG5pcXVlcy4gRkVSTiB1c2VzIEZpcmViYXNlLCBFeHByZXNzLmpzLCBSZWFjdC5qcywgYW5kIE5vZGUuanMuIFRoZXNlIGFsbG93IHRoZSBzaXRlIHRvIGJlIGZsZXhpYmxlLCByZXNwb25zaXZlLCBsaWdodHdlaWdodCwgYW5kIHlldCBzdGlsbCBwb3dlcmZ1bCBhbmQgcHJlY2lzZS4gVGhlIEZFUk4gc3RhY2sgaXMgbXkgcGVyc29uYWwgZmF2b3JpdGUgYW5kIG1vc3QgY29tZm9ydGFibGUgbWV0aG9kIGZvciBidWlsZGluZyBXZWIgQXBwcyBsaWtlIHRoaXMgb25lLCBob3dldmVyIEkgaGF2ZSBzb21lIGZhbWlsaWFyaXR5IHdpdGggdGhlIE1FUk4gKE1vbmdvREIvRXhwcmVzcy9SZWFjdC9Ob2RlKSBzdGFjayBhcyB3ZWxsLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJoZWFkZXIiLAogICAgICB7CiAgICAgICAgc3RhdGljU3R5bGU6IHsgImJhY2tncm91bmQtY29sb3IiOiAid2hpdGUsIGhlaWdodDogNTAwcHgiIH0sCiAgICAgICAgYXR0cnM6IHsgaWQ6ICJoZWFkZXIiIH0KICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIGhhcy10ZXh0LWNlbnRlcmVkIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBhdHRyczogeyBpZDogInNwYWNlciIgfSB9KSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGl0bGUiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIkpHbG9nbyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGlkOiAibG9nbyIsCiAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4vYXNzZXRzL0pHbG9nby5wbmciKSwKICAgICAgICAgICAgICAgIGFsdDogImxvZ28iLAogICAgICAgICAgICAgICAgd2lkdGg6ICIxNzAiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTkwIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAic3VidGl0bGUiLCBhdHRyczogeyBpZDogInN1YnRpdGxlIiB9IH0sIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIiBKb3JkYW4gR2FtYWNoZSAiKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aWxlIGlzLWFuY2VzdG9yIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGlsZSBpcy12ZXJ0aWNhbCBpcy02IGlzLXBhcmVudCIgfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImFydGljbGUiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogInRpbGUgaXMtY2hpbGQgYm94IiwgYXR0cnM6IHsgaWQ6ICJjYXJkMSIgfSB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiSGkgdGhlcmUhICIpLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBhdHRyczogeyByb2xlOiAiaW1nIiwgImFyaWEtbGFiZWwiOiAid2F2ZSIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIvCfkYvwn4+7IikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgcG9zaXRpb246ICJyZWxhdGl2ZSwgZmxvYXQ6IHJpZ2h0LCB0b3A6IDAsIGhlaWdodDogMjUwcHgiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4vYXNzZXRzL2hlbGxvLnBuZyIpLCBhbHQ6ICJoZWxsbyIgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBJJ20gSm9yZGFuIEdhbWFjaGUsIGEgZnJlZWxhbmNlIHdlYiBkZXZlbG9wZXIgd2l0aCBhIHBhc3Npb24gZm9yIGZyb250IGVuZCBVSS9VWCBhbmQgSmF2YVNjcmlwdCBmcmFtZXdvcmtzLiAiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYXJ0aWNsZSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGlsZSBpcy1jaGlsZCBib3giLCBhdHRyczogeyBpZDogImNhcmQyIiB9IH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRpdGxlIiB9LCBbX3ZtLl92KCJFeHBlcmllbmNlIildKSwKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgcG9zaXRpb246ICJyZWxhdGl2ZSwgZmxvYXQ6IHJpZ2h0LCB0b3A6IDAsIGhlaWdodDogMjAwcHgiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuL2Fzc2V0cy93aXJlZnJhbWUucG5nIiksCiAgICAgICAgICAgICAgICBhbHQ6ICJ3aXJlZnJhbWUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhhcy10ZXh0LWNlbnRlcmVkIiwKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBwYWRkaW5nOiAiMTBweCIgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgSSBhbSBhIFNlbmlvciBhdCB0aGUgVW5pdmVyc2l0eSBvZiBDZW50cmFsIEZsb3JpZGEgc3R1ZHlpbmcgSW50ZXJkaXNjaXBsaW5hcnkgU3R1ZGllcyBpbiBDb21wdXRhdGlvbmFsIFNjaWVuY2UgYW5kIENvbW1lcmNlLCB3aXRoIGEgTWlub3IgaW4gTmF0aW9uYWwgSW50ZWxsaWdlbmNlIGFuZCBTZWN1cml0eS4gSSBhbSBiZWdpbm5pbmcgdG8gd29yayBhcyBhIGZyZWVsYW5jZSB3ZWIgZGV2ZWxvcGVyLCBsb29raW5nIHRvIGJyaW5nIGJ1c2luZXNzZXMgYSBiZWF1dGlmdWwsIGNsZWFuIHdlYnNpdGUgdG8gcmVhY2ggbW9yZSBjdXN0b21lcnMsIGFuZCBrZWVwIHRoZW0uIENoZWNrIG91dCBteSByZXN1bcOpIG9yIHNlbmQgbWUgYW4gZW1haWwgYW5kIGxldCdzIHRhbGshICIKICAgICAgICAgICAgKQogICAgICAgICAgXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGlsZSBpcy02IGlzLXZlcnRpY2FsIGlzLXBhcmVudCIgfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImFydGljbGUiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogInRpbGUgaXMtY2hpbGQgYm94IiwgYXR0cnM6IHsgaWQ6ICJjYXJkMyIgfSB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIgfSwgW192bS5fdigiTGFuZ3VhZ2VzIildKSwKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgcG9zaXRpb246ICJyZWxhdGl2ZSwgdG9wOiAwLCBoZWlnaHQ6IDIwMHB4LCBmbG9hdDogcmlnaHQiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4vYXNzZXRzL3dlYl9hcHAucG5nIiksIGFsdDogIndlYkFwcCIgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhhcy10ZXh0LWNlbnRlcmVkIiwKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBwYWRkaW5nOiAiMTBweCIgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgSFRNTCwgQ1NTLCBKYXZhU2NyaXB0LCBTd2lmdCwgQywgSmF2YSwgRGFydCAiKQogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYXJ0aWNsZSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGlsZSBpcy1jaGlsZCBib3giLCBhdHRyczogeyBpZDogImNhcmQ0IiB9IH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRpdGxlIiB9LCBbX3ZtLl92KCJEZXZlbG9wbWVudCBUb29scyIpXSksCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAicmVsYXRpdmUsIHRvcDogMCwgaGVpZ2h0OiAyMDBweCwgZmxvYXQ6IHJpZ2h0IgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9hc3NldHMvZGV2ZWxvcGVyLnBuZyIpLAogICAgICAgICAgICAgICAgYWx0OiAiZGV2ZWxvcGVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoYXMtdGV4dC1jZW50ZXJlZCIsCiAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgcGFkZGluZzogIjEwcHgiIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIEF0b20sIEdpdEh1YiwgTm9kZSwgRXhwcmVzcywgRmlyZWJhc2UsIEZsdXR0ZXIsIFZpc3VhbCBTdHVkaW8gQ29kZSwgVHJhdmlzLCBSZWFjdCwgV29ya2luZyBDb3B5IChvbiBpT1MpLCBYY29kZSwgQnVsbWEsIFRlcm1pbmFsICIKICAgICAgICAgICAgKQogICAgICAgICAgXQogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2VjdGlvbi1ib2R5IiB9LCBbCiAgICAgIF9jKAogICAgICAgICJmb3JtIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImNvbnRhaW5lciBib3giLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgYWN0aW9uOiAiaHR0cHM6Ly91c2ViYXNpbi5jb20vZi84ODY4OGU3MzhmZGMiLAogICAgICAgICAgICBtZXRob2Q6ICJQT1NUIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIiBXYW50IHRvIHdvcmsgdG9nZXRoZXI/ICIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmllbGQgaXMtaG9yaXpvbnRhbCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZpZWxkLWxhYmVsIGlzLW5vcm1hbCIgfSwgWwogICAgICAgICAgICAgIF9jKCJsYWJlbCIsIHsgc3RhdGljQ2xhc3M6ICJsYWJlbCIgfSwgW192bS5fdigiRnJvbSIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmllbGQtYm9keSIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmllbGQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImNvbnRyb2wgaXMtZXhwYW5kZWQgaGFzLWljb25zLWxlZnQiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW5wdXQiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IG5hbWU6ICJuYW1lIiwgdHlwZTogInRleHQiLCBwbGFjZWhvbGRlcjogIk5hbWUiIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImljb24gaXMtc21hbGwgaXMtbGVmdCIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLXVzZXIiIH0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmllbGQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICJjb250cm9sIGlzLWV4cGFuZGVkIGhhcy1pY29ucy1sZWZ0IGhhcy1pY29ucy1yaWdodCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW5wdXQgaXMtbGluayIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiZW1haWwiLAogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiZW1haWwiLAogICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogIkVtYWlsIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImljb24gaXMtc21hbGwgaXMtbGVmdCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtZW52ZWxvcGUiIH0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiaWNvbiBpcy1zbWFsbCBpcy1yaWdodCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmEgZmEtY2hlY2siIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmllbGQgaXMtaG9yaXpvbnRhbCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZpZWxkLWxhYmVsIGlzLW5vcm1hbCIgfSwgWwogICAgICAgICAgICAgIF9jKCJsYWJlbCIsIHsgc3RhdGljQ2xhc3M6ICJsYWJlbCIgfSwgW192bS5fdigiU3ViamVjdCIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmllbGQtYm9keSIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmllbGQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udHJvbCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbnB1dCAiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic3ViamVjdCIsCiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogImUuZy4gV2Vic2l0ZSBSZWRlc2lnbiBSZXF1ZXN0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmaWVsZCBpcy1ob3Jpem9udGFsIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmllbGQtbGFiZWwgaXMtbm9ybWFsIiB9LCBbCiAgICAgICAgICAgICAgX2MoImxhYmVsIiwgeyBzdGF0aWNDbGFzczogImxhYmVsIiB9LCBbX3ZtLl92KCJNZXNzYWdlIildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmaWVsZC1ib2R5IiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmaWVsZCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250cm9sIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJ0ZXh0YXJlYSIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRleHRhcmVhIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1lc3NhZ2UiLAogICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJFeHBsYWluIGhvdyB3ZSBjYW4gaGVscCB5b3UiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiaGVscCIgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiICpUaGlzIGZpZWxkIGlzIHJlcXVpcmVkICIpCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmllbGQgaXMtaG9yaXpvbnRhbCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZpZWxkLWxhYmVsIiB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmaWVsZC1ib2R5IiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmaWVsZCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250cm9sIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnV0dG9uIGlzLWxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInN1Ym1pdCIgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdigiIFNlbmQgbWVzc2FnZSAiKV0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJmb290ZXIiLCB7IHN0YXRpY0NsYXNzOiAiaGVyby1mb290IiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCBoYXMtdGV4dC1jZW50ZXJlZCIgfSwgWwogICAgICAgIF92bS5fdigiIE1hZGUgd2l0aCAiKSwKICAgICAgICBfYygiaSIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmEgZmEtaGVhcnQiLAogICAgICAgICAgc3RhdGljU3R5bGU6IHsgY29sb3I6ICJyZ2IoMjM1LCA0MywgODYpIiB9CiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCIgJiAiKSwKICAgICAgICBfYygiaSIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmEgZmEtY29mZmVlIiwKICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGNvbG9yOiAicmdiKDQ0LCAzMSwgMjIpIiB9CiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCIgaW4gT3JsYW5kbyAiKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIiBjb250ZW50IGhhcy10ZXh0LWNlbnRlcmVkIiB9LCBbCiAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogImh0dHBzOi8vYnVsbWEuaW8iIH0gfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6ICJodHRwczovL2J1bG1hLmlvL2ltYWdlcy9tYWRlLXdpdGgtYnVsbWEtLWJsYWNrLnBuZyIsCiAgICAgICAgICAgICAgICBhbHQ6ICJNYWRlIHdpdGggQnVsbWEiLAogICAgICAgICAgICAgICAgd2lkdGg6ICIxMjgiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}